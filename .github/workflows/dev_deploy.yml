name: GrowIt CI/CD Pipeline

on:
  push:
    branches: [ refactor/#170 ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - '.github/workflows/**'

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
  JAVA_OPTS: "-Xmx4g"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: '${{ runner.os }}-gradle-${{ hashFiles(''**/*.gradle*'', ''**/gradle-wrapper.properties'') }}'
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make test application.yml
        run: |
          mkdir -p ./src/test/resources
          mkdir -p ./src/main/resources

          # test용 application.yml 생성
          cat << EOF > ./src/test/resources/application.yml
          server:
            port: 8080
            address: 0.0.0.0

          spring:
            datasource:
              driver-class-name: org.h2.Driver
              url: jdbc:h2:mem:testdb;MODE=MySQL;DB_CLOSE_DELAY=-1
              username: sa
              password: 

            sql:
              init:
                mode: never

            jpa:
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.H2Dialect
                  show_sql: true
                  format_sql: true
                  use_sql_comments: true
                  hbm2ddl:
                    auto: create-drop
                  default_batch_fetch_size: 1000

            oauth2:
              client:
                ios-kakao:
                  client-authentication-method: client_secret_post
                  client-id: test-client-id
                  client-secret: test-client-secret
                  redirect-uri: test-redirect-uri
                  authorization-grant-type: authorization_code
                  scope:
                    - account_email
                    - profile_nickname
                  client-name: ios-kakao
                server-kakao:
                  client-authentication-method: client_secret_post
                  client-id: test-client-id
                  client-secret: test-client-secret
                  redirect-uri: http://localhost:8080/auth/kakao/test
                  authorization-grant-type: authorization_code
                  scope:
                    - account_email
                    - profile_nickname
                  client-name: server-kakao
                provider:
                  kakao:
                    authorization-uri: https://kauth.kakao.com/oauth/authorize
                    token-uri: https://kauth.kakao.com/oauth/token
                    user-info-uri: https://kapi.kakao.com/v2/user/me
                    user-name-attribute: id

          jwt:
            secretKey: 6ec1d58be4b8cee07c36adf42bdc4d621fb5fb49136bc0763265ad58d4eada6b

          mail:
            host: smtp.gmail.com
            port: 587
            username: test@test.com
            password: test-password
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
                    required: true
                  connectiontimeout: 5000
                  timeout: 5000
                  writetimeout: 5000
            auth-code-expiration-millis: 1800000

          aws:
            accessKey: test-access-key
            secretKey: test-secret-key
            s3:
              bucket: test-bucket
              base-url: http://test-url

          openai:
            model1: test-model1
            model2: test-model2
            api:
              key: test-key
              url: test-url

          management:
            endpoints:
              web:
                exposure:
                  include: prometheus
            metrics:
              enable:
                all: true
            prometheus:
              metrics:
                export:
                  enabled: true
          EOF

          # 메인 application.yml 생성
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew test --parallel --max-workers=4

      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results
          path: build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: '${{ runner.os }}-gradle-${{ hashFiles(''**/*.gradle*'', ''**/gradle-wrapper.properties'') }}'
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test --parallel --build-cache

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: GrowItServer
          path: build/libs/*.jar
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: GrowItServer
          path: build/libs/

      - name: Health check before deploy
        run: |
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://${{ secrets.EC2_HOST }}:8080/health || echo "000")
          echo "Current health status: $response"

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          
          APP_NAME="GrowItServer"
          JAR_PATH="/home/$EC2_USERNAME/$APP_NAME.jar"
          LOG_PATH="/home/$EC2_USERNAME/app.log"
          BACKUP_PATH="/home/$EC2_USERNAME/backup"
          
          mkdir -p $BACKUP_PATH
          
          if [ -f $JAR_PATH ]; then
            mv $JAR_PATH $BACKUP_PATH/$APP_NAME.jar.$(date +%Y%m%d_%H%M%S)
          fi
          
          if [ -f $LOG_PATH ]; then
            mv $LOG_PATH $BACKUP_PATH/app.log.$(date +%Y%m%d_%H%M%S)
          fi
          
          pid=$(pgrep -f $APP_NAME)
          if [ ! -z "$pid" ]; then
            kill -15 $pid
            sleep 10
          
            if ps -p $pid > /dev/null; then
              kill -9 $pid
            fi
          fi
          
          nohup java -jar \
            -Dspring.profiles.active=prod \
            -XX:+HeapDumpOnOutOfMemoryError \
            -XX:HeapDumpPath=/home/$EC2_USERNAME/heapdump.hprof \
            -Xms512m -Xmx1024m \
            $JAR_PATH > $LOG_PATH 2>&1 &
          
          sleep 30
          if pgrep -f $APP_NAME > /dev/null; then
            echo "Application started successfully"
            exit 0
          else
            echo "Application failed to start"
            exit 1
          fi
          EOF
          
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:$JAR_PATH
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            chmod +x /home/$EC2_USERNAME/deploy.sh
            /home/$EC2_USERNAME/deploy.sh
          "
          
          rm -f private_key.pem