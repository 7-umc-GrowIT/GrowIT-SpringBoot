# GrowIt 프로젝트의 CI/CD 파이프라인 워크플로우
name: GrowIt CI/CD Pipeline

# 워크플로우 트리거 조건 설정
on:
  push:
    branches: [ refactor/#170 ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - '.github/workflows/**'

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
  JAVA_OPTS: "-Xmx4g"

# 실행할 작업들을 정의
jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    steps:
      # 1. 깃허브 저장소 코드를 워크플로우 환경으로 가져오기
      - uses: actions/checkout@v3

      # 2. Java 개발 킷(JDK) 17 버전 설치 및 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'    # Eclipse Temurin JDK 사용
          java-version: '17'         # Java 17 버전 지정

      # 3. Gradle 캐시 설정
      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: '${{ runner.os }}-gradle-${{ hashFiles(''**/*.gradle*'', ''**/gradle-wrapper.properties'') }}'
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. application.yml 설정 파일 생성
      - name: Make application.yml
        run: |
          cd ./src/main/resources   # resources 디렉토리로 이동
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml  # GitHub Secrets에서 설정값 가져와서 파일 생성
        shell: bash

      # 5. gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle을 사용하여 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test  # 테스트 제외하고 빌드

      # 7. 빌드된 JAR 파일을 아티팩트로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: GrowItServer        # 아티팩트 이름 지정
          path: build/libs/*.jar    # 업로드할 JAR 파일 경로
          retention-days: 1

  # 배포 작업
  deploy:
    needs: build  # build 작업이 성공적으로 완료된 후에 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 이전 빌드 작업에서 생성된 아티팩트 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: GrowItServer    # 다운로드할 아티팩트 이름
          path: build/libs/     # 저장할 경로

      # 2. 서버 헬스 체크
      - name: Health check before deploy
        run: |
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://${{ secrets.EC2_HOST }}:8080/health || echo "000")
          echo "Current health status: $response"

      # 3. EC2 인스턴스에 배포
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          
          APP_NAME="GrowItServer"
          JAR_PATH="/home/$EC2_USERNAME/$APP_NAME.jar"
          LOG_PATH="/home/$EC2_USERNAME/app.log"
          BACKUP_PATH="/home/$EC2_USERNAME/backup"
          
          mkdir -p $BACKUP_PATH
          
          if [ -f $JAR_PATH ]; then
            mv $JAR_PATH $BACKUP_PATH/$APP_NAME.jar.$(date +%Y%m%d_%H%M%S)
          fi
          
          if [ -f $LOG_PATH ]; then
            mv $LOG_PATH $BACKUP_PATH/app.log.$(date +%Y%m%d_%H%M%S)
          fi
          
          pid=$(pgrep -f $APP_NAME)
          if [ ! -z "$pid" ]; then
            kill -15 $pid
            sleep 10
          
            if ps -p $pid > /dev/null; then
              kill -9 $pid
            fi
          fi
          
          nohup java -jar \
            -Dspring.profiles.active=prod \
            -XX:+HeapDumpOnOutOfMemoryError \
            -XX:HeapDumpPath=/home/$EC2_USERNAME/heapdump.hprof \
            -Xms512m -Xmx1024m \
            $JAR_PATH > $LOG_PATH 2>&1 &
          
          sleep 30
          if pgrep -f $APP_NAME > /dev/null; then
            echo "Application started successfully"
            exit 0
          else
            echo "Application failed to start"
            exit 1
          fi
          EOF
          
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:$JAR_PATH
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            chmod +x /home/$EC2_USERNAME/deploy.sh
            /home/$EC2_USERNAME/deploy.sh
          "
          
          rm -f private_key.pem